var _user$project$ModalRouter_State$setCurrentState = F2(
	function (modal, url) {
		return _user$project$History$replaceState(
			A2(_user$project$History$HistoryState, modal, url));
	});
var _user$project$ModalRouter_State$modalUrlToPageUrl = function (modalUrl) {
	return modalUrl;
};
var _user$project$ModalRouter_State$applyState = function (state) {
	return _elm_lang$core$Platform_Cmd$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$History$replaceState(state),
				function () {
				var _p0 = state.modal;
				if (_p0.ctor === 'Nothing') {
					return _elm_lang$core$Platform_Cmd$none;
				} else {
					return _user$project$Modal$open(_p0._0);
				}
			}()
			]));
};
var _user$project$ModalRouter_State$init = {
	ctor: '_Tuple2',
	_0: _user$project$ModalRouter_Types$Model(
		_elm_lang$core$Native_List.fromArray(
			[])),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$ModalRouter_State$placeholderUrl = 'placeholderUrl';
var _user$project$ModalRouter_State$createState = F2(
	function (modal, url) {
		var stateUrl = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$ModalRouter_State$placeholderUrl,
			_elm_lang$core$Maybe$oneOf(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$core$Maybe$andThen,
						modal,
						function (x) {
							return x.targetUrl;
						}),
						url
					])));
		return _user$project$History$pushState(
			A2(_user$project$History$HistoryState, modal, stateUrl));
	});
var _user$project$ModalRouter_State$update = F2(
	function (msg, model) {
		var _p1 = msg;
		switch (_p1.ctor) {
			case 'PopState':
				var _p2 = _p1._0;
				if (_p2.ctor === 'Nothing') {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: A2(_user$project$ModalRouter_State$setCurrentState, _elm_lang$core$Maybe$Nothing, _user$project$ModalRouter_State$placeholderUrl)
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: model,
						_1: _user$project$ModalRouter_State$applyState(_p2._0)
					};
				}
			case 'ModalOpen':
				var _p3 = _p1._0;
				var modalRegisteredAsOpen = A2(_elm_lang$core$List$member, _p3, model.openModals);
				return modalRegisteredAsOpen ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							openModals: A2(_elm_lang$core$List_ops['::'], _p3, model.openModals)
						}),
					_1: A2(
						_user$project$ModalRouter_State$createState,
						_elm_lang$core$Maybe$Just(_p3),
						_elm_lang$core$Maybe$Nothing)
				};
			default:
				var _p4 = _p1._0;
				var listWithoutModal = A2(
					_elm_lang$core$List$filter,
					function (n) {
						return !_elm_lang$core$Native_Utils.eq(n, _p4);
					},
					model.openModals);
				var modalRegisteredAsClosed = _elm_lang$core$Basics$not(
					A2(_elm_lang$core$List$member, _p4, model.openModals));
				return modalRegisteredAsClosed ? {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{openModals: listWithoutModal}),
					_1: A2(
						_user$project$ModalRouter_State$createState,
						_elm_lang$core$List$head(listWithoutModal),
						_elm_lang$core$Maybe$Nothing)
				};
		}
	});
var _user$project$ModalRouter_State$onPopState = _elm_lang$core$Native_Platform.incomingPort(
	'onPopState',
	_elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
				A2(
				_elm_lang$core$Json_Decode$map,
				_elm_lang$core$Maybe$Just,
				A2(
					_elm_lang$core$Json_Decode$andThen,
					A2(
						_elm_lang$core$Json_Decode_ops[':='],
						'modal',
						_elm_lang$core$Json_Decode$oneOf(
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
									A2(
									_elm_lang$core$Json_Decode$map,
									_elm_lang$core$Maybe$Just,
									A2(
										_elm_lang$core$Json_Decode$andThen,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'selector', _elm_lang$core$Json_Decode$string),
										function (selector) {
											return A2(
												_elm_lang$core$Json_Decode$andThen,
												A2(
													_elm_lang$core$Json_Decode_ops[':='],
													'targetUrl',
													_elm_lang$core$Json_Decode$oneOf(
														_elm_lang$core$Native_List.fromArray(
															[
																_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
																A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
															]))),
												function (targetUrl) {
													return _elm_lang$core$Json_Decode$succeed(
														{selector: selector, targetUrl: targetUrl});
												});
										}))
								]))),
					function (modal) {
						return A2(
							_elm_lang$core$Json_Decode$andThen,
							A2(_elm_lang$core$Json_Decode_ops[':='], 'url', _elm_lang$core$Json_Decode$string),
							function (url) {
								return _elm_lang$core$Json_Decode$succeed(
									{modal: modal, url: url});
							});
					}))
			])));
var _user$project$ModalRouter_State$onModalOpen = _elm_lang$core$Native_Platform.incomingPort(
	'onModalOpen',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'selector', _elm_lang$core$Json_Decode$string),
		function (selector) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(
					_elm_lang$core$Json_Decode_ops[':='],
					'targetUrl',
					_elm_lang$core$Json_Decode$oneOf(
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
								A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
							]))),
				function (targetUrl) {
					return _elm_lang$core$Json_Decode$succeed(
						{selector: selector, targetUrl: targetUrl});
				});
		}));
var _user$project$ModalRouter_State$onModalClose = _elm_lang$core$Native_Platform.incomingPort(
	'onModalClose',
	A2(
		_elm_lang$core$Json_Decode$andThen,
		A2(_elm_lang$core$Json_Decode_ops[':='], 'selector', _elm_lang$core$Json_Decode$string),
		function (selector) {
			return A2(
				_elm_lang$core$Json_Decode$andThen,
				A2(
					_elm_lang$core$Json_Decode_ops[':='],
					'targetUrl',
					_elm_lang$core$Json_Decode$oneOf(
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$core$Json_Decode$null(_elm_lang$core$Maybe$Nothing),
								A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_lang$core$Json_Decode$string)
							]))),
				function (targetUrl) {
					return _elm_lang$core$Json_Decode$succeed(
						{selector: selector, targetUrl: targetUrl});
				});
		}));
var _user$project$ModalRouter_State$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$ModalRouter_State$onPopState(_user$project$ModalRouter_Types$PopState),
				_user$project$ModalRouter_State$onModalOpen(_user$project$ModalRouter_Types$ModalOpen),
				_user$project$ModalRouter_State$onModalClose(_user$project$ModalRouter_Types$ModalClose)
			]));
};
