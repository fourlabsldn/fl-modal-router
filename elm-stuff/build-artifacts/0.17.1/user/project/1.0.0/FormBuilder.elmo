var _user$project$FormBuilder$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _user$project$FormBuilder$popstate = _elm_lang$core$Native_Platform.incomingPort('popstate', _elm_lang$core$Json_Decode$string);
var _user$project$FormBuilder$modalOpen = _elm_lang$core$Native_Platform.incomingPort('modalOpen', _elm_lang$core$Json_Decode$string);
var _user$project$FormBuilder$modalClose = _elm_lang$core$Native_Platform.incomingPort('modalClose', _elm_lang$core$Json_Decode$string);
var _user$project$FormBuilder$openModal = _elm_lang$core$Native_Platform.outgoingPort(
	'openModal',
	function (v) {
		return v;
	});
var _user$project$FormBuilder$Model = function (a) {
	return {message: a};
};
var _user$project$FormBuilder$init = {
	ctor: '_Tuple2',
	_0: _user$project$FormBuilder$Model(''),
	_1: _elm_lang$core$Platform_Cmd$none
};
var _user$project$FormBuilder$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'PopState':
				return {
					ctor: '_Tuple2',
					_0: _user$project$FormBuilder$Model(
						A2(_elm_lang$core$Basics_ops['++'], 'Popstate invoked: ', _p0._0)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ModalOpen':
				return {
					ctor: '_Tuple2',
					_0: _user$project$FormBuilder$Model(
						A2(_elm_lang$core$Basics_ops['++'], 'Modal was open: ', _p0._0)),
					_1: _user$project$FormBuilder$openModal('Straight from ELM!! BOOM!')
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _user$project$FormBuilder$Model(
						A2(_elm_lang$core$Basics_ops['++'], 'Modal was closed: ', _p0._0)),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$FormBuilder$ModalClose = function (a) {
	return {ctor: 'ModalClose', _0: a};
};
var _user$project$FormBuilder$ModalOpen = function (a) {
	return {ctor: 'ModalOpen', _0: a};
};
var _user$project$FormBuilder$PopState = function (a) {
	return {ctor: 'PopState', _0: a};
};
var _user$project$FormBuilder$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_user$project$FormBuilder$popstate(_user$project$FormBuilder$PopState),
				_user$project$FormBuilder$modalOpen(_user$project$FormBuilder$ModalOpen),
				_user$project$FormBuilder$modalClose(_user$project$FormBuilder$ModalClose)
			]));
};
var _user$project$FormBuilder$main = {
	main: _elm_lang$html$Html_App$program(
		{init: _user$project$FormBuilder$init, view: _user$project$FormBuilder$view, update: _user$project$FormBuilder$update, subscriptions: _user$project$FormBuilder$subscriptions})
};
